
//Service
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { catchError } from 'rxjs/operators';

@Injectable({
    providedIn: 'root'
})
export class ApiService {

    constructor(private http: HttpClient) { }

    downloadCsv(userStories: any): Observable<Blob> {
        // Set HTTP headers to specify content type and responseType
        const headers = new HttpHeaders({
            'Content-Type': 'application/json',
            'Accept': 'text/csv'
        });

        // Make a POST request to the download_csv endpoint with the userStories data
        return this.http.post<Blob>('http://localhost:5000/download_csv', userStories, {
            headers: headers,
            responseType: 'blob' as 'json' // Specify response type as blob to handle file download
        }).pipe(
            catchError(error => {
                throw 'Error downloading CSV file: ' + error;
            })
        );
    }
}


//Component
import { Component } from '@angular/core';
import { ApiService } from './api.service';

@Component({
  selector: 'app-your-component',
  templateUrl: './your-component.component.html',
  styleUrls: ['./your-component.component.css']
})
export class YourComponent {

  constructor(private apiService: ApiService) { }

  downloadCsv(): void {
    // Assuming userStories contains the user stories data
    const userStories = { /* Your user stories data here */ };

    // Call the downloadCsv method from the ApiService
    this.apiService.downloadCsv(userStories).subscribe(
      (data: Blob) => {
        // Create URL for the Blob data
        const url = window.URL.createObjectURL(data);

        // Create a link element
        const link = document.createElement('a');
        link.href = url;

        // Set the filename for the downloaded file
        link.download = 'user_stories.csv';

        // Append the link to the document body
        document.body.appendChild(link);

        // Click the link to trigger the download
        link.click();

        // Cleanup: remove the link and revoke the URL
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
      },
      error => {
        console.error('Error downloading CSV file:', error);
      }
    );
  }
}



<button (click)="downloadCsv()">Download CSV</button>




npx ng add @angular/material
npm install ngx-file-drop --save
npm install --save @angular/material @angular/cdk

